# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/json_matchers/all/json_matchers.rbi
#
# json_matchers-0.11.1

module JsonMatchers
  def self.path_to_schema(schema_name); end
  def self.schema_root; end
  def self.schema_root=(arg0); end
end
class JsonMatchers::Parser
  def initialize(schema_path); end
  def parse; end
  def schema_data; end
  def schema_path; end
end
class JsonMatchers::Validator
  def build_json_schema_with_expanded_references; end
  def document_store; end
  def initialize(document_store:, schema_path:); end
  def json_schema; end
  def schema_path; end
  def validate(payload); end
end
class JsonMatchers::Matcher
  def build_and_populate_document_store; end
  def document_store; end
  def errors; end
  def errors=(arg0); end
  def initialize(schema_path); end
  def matches?(payload); end
  def schema_path; end
  def traverse_schema_root_with_first_level_symlinks; end
  def validation_failure_message; end
  def validator; end
end
class JsonMatchers::InvalidSchemaError < StandardError
end
class JsonMatchers::MissingSchema < Errno::ENOENT
end
class JsonMatchers::Payload
  def as_json; end
  def extract_json_string(payload); end
  def initialize(payload); end
  def payload; end
  def to_s; end
end
class JsonMatchers::Assertion
  def format_json(json); end
  def initialize(schema_name); end
  def invalid_failure_message; end
  def last_error_message; end
  def matcher; end
  def payload; end
  def schema_body; end
  def schema_name; end
  def schema_path; end
  def valid?(json); end
  def valid_failure_message; end
end
module RSpec::Matchers
  def match_json_schema(*expected, &block_arg); end
  def match_response_schema(*args, &block); end
end
